# -*- coding: utf-8 -*-
"""Base_de_datos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y_6IbT1c7YVGNasocCX7BoOUlNFPCdG5
"""

!python -V

"""#**Tratamiento de datos**"""

import pandas as pd
pd.set_option("display.max_rows",15)

dataset=pd.read_csv("alquiler.csv", sep=";")

dataset.describe()

type(dataset)

dataset.info()

dataset.head(3)

dataset.dtypes

pd.DataFrame(dataset.dtypes)

informacion=pd.DataFrame(dataset.dtypes, columns=["Registros"])
informacion

informacion.columns.name="Variables"
informacion

dataset.shape[0]

dataset.shape[1]

print("El numero de registros son {} con {} de parametro".format(dataset.shape[0],dataset.shape[1]))

"""#**Valores unicos**"""

datos = pd.read_csv("alquiler.csv", sep=";")

datos.head(3)

datos["Tipo"].unique()

datos.Tipo.value_counts()

datos.Tipo

tratamiento = datos["Tipo"]

tratamiento.drop_duplicates()

tratamiento

tratamiento.drop_duplicates(inplace=True)

tratamiento

tratamiento = pd.DataFrame(tratamiento)

tratamiento

tratamiento.columns.name = "ID"
tratamiento

list(datos["Tipo"].drop_duplicates())

list_residencia =['Habitación',
 'Casa',
 'Departamento',
 'Casa comercial',
 'Casa de villa',
 'Loft',
 'Chalet']
list_residencia

datos_residencia = datos["Tipo"].isin(list_residencia)
datos_residencia

seccion = datos[datos_residencia]
seccion

datos.shape[0]

seccion.shape[0]

seccion.index = range(seccion.shape[0])

seccion

"""#**Operaciones de frecuencia de la seccion**"""

seccion.to_csv('seccion.csv', sep=';', index=False)

seleccion = pd.read_csv("seccion.csv", sep =";")
seleccion.head()

list(seleccion.Tipo.drop_duplicates())

#Establecer la frecuencia de "Departamento"
seccion_dp = seleccion["Tipo"]=="Departamento"
n1 = seleccion[seccion_dp].shape[0]
n1

#Establecer la frecuencia de 'Casa' , 'Casa comercial' y 'Casa de villa'
seccion_c = (seleccion["Tipo"]=="Casa")| (seleccion["Tipo"]=="Casa comercial") | (seleccion["Tipo"]=="Casa de villa")
n2 = seleccion[seccion_c].shape[0]
n2

#Establecer la frecuencia de inmuebles entre 60 a 100 m^2 de "Area"
seccion_a = (seleccion["Area"]>60)&(seleccion["Area"]<100)
n3 = seleccion[seccion_a].shape[0]
n3

#Establecer inmuebles con 4 cuartos minimo y un alquiler menos a $2.000
seccion_e = (seleccion['Cuartos']>=4)&(seleccion['Valor']<2000)
n4= seleccion[seccion_e].shape[0]
n4

print("El número de departamentos disponibles son {}".format(n1))
print("El número de casas, casas comerciales y casas villa disponibles son {}".format(n2))
print("El número de inmuebles entre 60 a 100 m^2 de area disponibles son {}".format(n3))
print("El número de inmuebles con 4 cuartos minimo y un alquiler menos a $2.000 disponibles son {}".format(n4))

"""#**Manejo de Datos Null**"""

seccion.head(5)

seccion["Valor"].isnull()

seccion[seccion["Valor"].isnull()]

A = seccion.shape[0]
seccion.dropna(subset=["Valor"], inplace=True)
B = seccion.shape[0]
A-B

seccion[seccion["Valor"].isnull()]

seccion[seccion["Mantenimiento"].isnull()].shape[0]

seccion_tratada = (seccion["Mantenimiento"].isnull())&(seccion["Tipo"]=="Departamento")
seccion_tratada

A=seccion.shape[0]
seccion = seccion[~seccion_tratada]
B=seccion.shape[0]
A-B

seccion[seccion["Mantenimiento"].isnull()].shape[0]

seccion = seccion.fillna({"Mantenimiento":0, "Impuesto":0})
seccion

seccion.info()

seccion[seccion["Mantenimiento"].isnull()].shape[0]

seccion[seccion["Impuesto"].isnull()].shape[0]

seccion.to_csv("seccion_tratada.csv", sep=";", index=False)

"""#**Desarrollo de criterios**"""

seccion_tratada = pd.read_csv("seccion_tratada.csv", sep=";")
seccion_tratada.head()

seccion_tratada["Valor bruto"] = (seccion_tratada["Valor"])+(seccion_tratada["Impuesto"])+(seccion_tratada["Mantenimiento"])
seccion_tratada.head()

seccion_tratada["Valor m^2"] = ((seccion_tratada["Valor"])/(seccion_tratada["Area"])).round(2)
seccion_tratada.head()

seccion_tratada["Valor bruto/m^2"] = ((seccion_tratada["Valor bruto"])/(seccion_tratada["Area"])).round(2)
seccion_tratada.head()

list(seccion_tratada["Tipo"].drop_duplicates())

casa = ['Casa', 'Casa comercial', 'Casa de villa', 'Chalet']

seccion_tratada["Agrupacion"] = seccion_tratada["Tipo"].apply(lambda x : "Casa" if x in casa else "Departamento")
seccion_tratada.head(3)

"""#**Tipos de eliminación**"""

seccion_aux = pd.DataFrame(seccion_tratada[["Valor bruto", "Valor m^2", "Agrupacion"]])
seccion_aux.head(3)

del seccion_aux['Valor bruto']

seccion_aux.head()

seccion_aux.pop("Valor m^2")

seccion_aux.head()

seccion_tratada.head(3)

seccion_tratada.drop(["Valor bruto", "Valor bruto/m^2"], axis=1, inplace=True)

seccion_tratada.head(3)

seccion_tratada.to_csv("seccion_tratada_2.csv", sep=";", index=False)

"""#**Desarrollo de agrupaciones**"""

data_especifica = pd.read_csv("seccion_tratada_2.csv", sep=";")
data_especifica.head(3)

data_especifica["Valor"].mean().round(3)

#barrios = ["San Borja", "Lurigancho", "Pachacámac"]
#seleccion_barrios = data_especifica['Distrito'].isin(barrios)
#data_especifica = data_especifica[seleccion_barrios]
#data_especifica.head(5)

data_especifica['Distrito'].drop_duplicates()

grupo = data_especifica.groupby("Distrito")

type(grupo)

grupo.groups

#opcion 1
for barrio, data in grupo:
  print("{} -> {}".format(barrio, data["Valor"].mean().round(2)))

#opcion 2
grupo["Valor"].mean().round(2)

"""#**Generar estadisticas base**"""

grupo["Valor"].describe().round(2)

from sqlalchemy.sql.expression import column
grupo["Valor"].aggregate(["min", "max"]).rename(columns = { "min":"Minimo", "max":"Maximo"})

"""#**Desarrollo de graficos**"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
plt.rc('figure' , figsize =(10,5))

fig = grupo['Valor'].mean().plot.bar(color="blue")
fig.set_ylabel("Valor del patrimonio")
fig.set_xlabel("Barrios")
fig.set_title("Estadistica de valores para Distritos", {"fontsize":22})

fig = grupo['Valor'].max().plot.bar(color="blue")
fig.set_ylabel("Valor del patrimonio")
fig.set_xlabel("Barrios")
fig.set_title("Estadistica de valores para Distritos", {"fontsize":22})

"""#**Tratamiento de quartiles**

#Quartiles de valor
"""

data_especifica.boxplot(["Valor"])

data_especifica[data_especifica['Valor']>= 500000]

valor = data_especifica["Valor"]

Q1 = valor.quantile(.25)
Q3 = valor.quantile(.75)
IIQ = Q3-Q1

limite_inferior = Q1 - 1.5 * IIQ
limite_superior = Q3 + 1.5 * IIQ

select = ((valor >= limite_inferior) & (valor <= limite_superior))
data_new = data_especifica[select]

data_new.boxplot(["Valor"])

data_especifica.hist(["Valor"])

data_new.hist(["Valor"])

"""#Quartiles de m^2"""

data_especifica.boxplot(["Valor m^2"])

data_especifica[data_especifica["Valor m^2"] > 2000]

m2 = data_especifica['Valor m^2']

Q1 = m2.quantile(.25)
Q3 = m2.quantile(.75)
IIQ = Q3-Q1

limite_inferior = Q1 - 1.5 * IIQ
limite_superior = Q3 +1.5 * IIQ

print("Q1 = {} , Q3 = {}, IIQ = {}, limite inferior = {}, limite superior = {}".format(Q1,Q3,IIQ,limite_inferior, limite_superior))

seleccion = ((m2 >= limite_inferior) & (m2 <= limite_superior))
data_m2 = data_especifica[seleccion]

data_m2.boxplot(['Valor m^2'])

"""#**Outliers por Grupo**"""

data_especifica.boxplot(["Valor"], by = ["Tipo"])

grupo = data_especifica.groupby("Tipo")["Valor"]

type(grupo)

grupo.groups

Q1 = grupo.quantile(.25)
Q3 = grupo.quantile(.75)

IIQ = Q3-Q1

limite_inferior = Q1 - 1.5 * IIQ
limite_superior = Q3 + 1.5 * IIQ

datos_new = pd.DataFrame()
for tipo in grupo.groups.keys():
  is_tipo = data_especifica["Tipo"] == tipo
  is_limite = ((data_especifica['Valor'] >= limite_inferior[tipo]) & (data_especifica['Valor'] <= limite_superior[tipo]))
  seleccion = is_limite & is_tipo
  data_selec = data_especifica[seleccion]
  datos_new = pd.concat([datos_new, data_selec])

datos_new.boxplot(["Valor"], by=["Tipo"])

data_new.to_csv("data_alquiler_tratada.csv", sep = ";", index = False)

"""#**Graficos de matplotlib**"""

# Commented out IPython magic to ensure Python compatibility.
from matplotlib import figure
# %matplotlib inline
import matplotlib.pyplot as plt
plt.rc("figure", figsize=(15,20))

data_f = pd.read_csv("data_alquiler_tratada.csv", sep = ";")
data_f.head(3)

area = plt.figure()

g1 = area.add_subplot(2,2,1)
g2 = area.add_subplot(2,2,2)
g3 = area.add_subplot(2,2,3)
g4 = area.add_subplot(2,2,4)

g1.scatter(data_f["Valor"], data_f.Area)
g1.set_title("Valor x Area")

g2.hist(data_f.Valor)
g2.set_title("Histograma Valor")

data_g3 = data_f.Valor.sample(100)
data_g3.index = range(data_g3.shape[0])
g3.plot (data_g3)
g3.set_title("Muestreo")

grupo = data_f.groupby("Tipo")["Valor"]
label = grupo.mean().index
valor = grupo.mean().values
g4.bar(label, valor)
g4.set_title("Grafico de tipo de imueble, respecto al valor")

area

area.savefig("graficas.png", dpi=300, bbox_inches="tight")

